input {
	file {
	
		path => [
			"C:/MRSLogs/OCM-01A/Wabtec$/OCM/Diagnostics/*/BOS*.*.log",
			"C:/MRSLogs/OCM-01A/Wabtec$/OCM/Diagnostics/Livelog.txt",
			"C:/MRSLogs/OCM-01B/Wabtec$/OCM/Diagnostics/*/BOS*.*.log"
		]
#		codec => multiline {
#			  pattern => "^%{DATE_US} "
#			  negate => true
#			  what => "previous"
#      }		
		type => "ocm"
		start_position => "beginning"
	   
	}
}
	

filter {
# uuid {
#  target => "@uuid"
#  overwrite => true
#  }
#  fingerprint {
#    source => ["message"]
#    target => "fingerprint"
#    key => "78787878"
#    method => "SHA1"
#    concatenate_sources => true
#  }

if [type] == "ocm" {
		 mutate{
			add_field => ["railroad", "MRS"]
			add_field => ["source", "OCM"]
			}	
			
			#if ([message] =~ "%{CLICKED -(YES TO DELETE TRAIN ID}"}) {
			#	drop {}
			#	}
					grok {
				#match => { "message" => "%{WORD:CLICKED -(YES TO DELETE TRAIN ID}}" }
					match => { "message" => "%{ CLICKED -(YES TO DELETE TRAIN ID:}"}

				#	  match => [ "message", "%{InsertNewTrainIDIntoDatabase1:INSERT INTO tblTrainsActive(}" ] 
				#	  match => [ "message", "%{CLICKED -(YES TO DELETE TRAIN ID}" ] 
				#	  # overwrite => [“message”] 
				#	}
					if "_grokparsefailure" in [ocm] {
					 drop {}
					 }	
		}

 }	

output {

 if [type] == "ocm"{
	   	   stdout {	   
	    codec => "json"
		}
	}
}